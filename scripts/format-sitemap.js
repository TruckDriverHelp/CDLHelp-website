#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç XML —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
 * @param {string} xmlString - –ù–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è XML —Å—Ç—Ä–æ–∫–∞
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è XML —Å—Ç—Ä–æ–∫–∞
 */
function formatXML(xmlString) {
  const PADDING = '  '; // 2 –ø—Ä–æ–±–µ–ª–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
  const reg = /(>)(<)(\/*)/g;
  let formatted = xmlString.replace(reg, '$1\n$2$3');
  
  let pad = 0;
  formatted = formatted.split('\n').map((line) => {
    let indent = 0;
    if (line.match(/.+<\/\w[^>]*>$/)) {
      indent = 0;
    } else if (line.match(/^<\/\w/) && pad > 0) {
      pad -= 1;
    } else if (line.match(/^<\w[^>]*[^\/]>.*$/)) {
      indent = 1;
    } else {
      indent = 0;
    }
    
    const padding = PADDING.repeat(pad);
    pad += indent;
    
    return padding + line;
  }).join('\n');
  
  return formatted;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω XML —Ñ–∞–π–ª
 * @param {string} filePath - –ü—É—Ç—å –∫ XML —Ñ–∞–π–ª—É
 */
function formatSitemapFile(filePath) {
  try {
    console.log(`–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${filePath}`);
    
    const content = fs.readFileSync(filePath, 'utf8');
    const formatted = formatXML(content);
    
    fs.writeFileSync(filePath, formatted, 'utf8');
    
    console.log(`‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: ${filePath}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ${filePath}:`, error.message);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  const publicDir = path.join(process.cwd(), 'public');
  
  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XML —Ñ–∞–π–ª–æ–≤ sitemap...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ XML —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ public
    const files = fs.readdirSync(publicDir)
      .filter(file => file.endsWith('.xml') && (file.includes('sitemap') || file === 'robots.txt'))
      .map(file => path.join(publicDir, file));
    
    if (files.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã XML —Ñ–∞–π–ª—ã sitemap –≤ –ø–∞–ø–∫–µ public/');
      return;
    }
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${files.length}`);
    files.forEach(file => console.log(`  - ${path.basename(file)}`));
    console.log('');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    files.forEach(formatSitemapFile);
    
    console.log('\n‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = files.map(file => {
      const stat = fs.statSync(file);
      return {
        name: path.basename(file),
        size: (stat.size / 1024).toFixed(2) + ' KB'
      };
    });
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤:');
    stats.forEach(({ name, size }) => {
      console.log(`  ${name}: ${size}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { formatXML, formatSitemapFile, main }; 