const fs = require('fs');
const path = require('path');

const LOCALES_DIR = path.join(process.cwd(), 'public/locales');
const SUPPORTED_LOCALES = ['en', 'ru', 'uk', 'ar', 'ko', 'zh', 'tr', 'pt'];
const BASE_LOCALE = 'en'; // –ë–∞–∑–æ–≤–∞—è –ª–æ–∫–∞–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞ (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ)
function getAllKeys(obj, prefix = '') {
  let keys = [];
  
  for (const key in obj) {
    const fullKey = prefix ? `${prefix}.${key}` : key;
    
    if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
      keys = keys.concat(getAllKeys(obj[key], fullKey));
    } else {
      keys.push(fullKey);
    }
  }
  
  return keys;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –æ–±—ä–µ–∫—Ç–µ
function hasKey(obj, keyPath) {
  const keys = keyPath.split('.');
  let current = obj;
  
  for (const key of keys) {
    if (current && typeof current === 'object' && key in current) {
      current = current[key];
    } else {
      return false;
    }
  }
  
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–∞
function loadTranslationFile(locale, filename) {
  const filePath = path.join(LOCALES_DIR, locale, filename);
  
  if (!fs.existsSync(filePath)) {
    return null;
  }
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(content);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${filePath}: ${error.message}`);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function checkTranslations() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');
  
  let hasErrors = false;
  const baseLocaleDir = path.join(LOCALES_DIR, BASE_LOCALE);
  
  if (!fs.existsSync(baseLocaleDir)) {
    console.error(`‚ùå –ë–∞–∑–æ–≤–∞—è –ª–æ–∫–∞–ª—å ${BASE_LOCALE} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
    process.exit(1);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ –±–∞–∑–æ–≤–æ–π –ª–æ–∫–∞–ª–∏
  const translationFiles = fs.readdirSync(baseLocaleDir)
    .filter(file => file.endsWith('.json'));
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${translationFiles.length}`);
  console.log(`üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ª–æ–∫–∞–ª–∏: ${SUPPORTED_LOCALES.join(', ')}\n`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞
  for (const filename of translationFiles) {
    console.log(`üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: ${filename}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª
    const baseTranslations = loadTranslationFile(BASE_LOCALE, filename);
    if (!baseTranslations) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª ${filename}`);
      hasErrors = true;
      continue;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    const baseKeys = getAllKeys(baseTranslations);
    console.log(`   üîë –ö–ª—é—á–µ–π –≤ –±–∞–∑–æ–≤–æ–º —Ñ–∞–π–ª–µ: ${baseKeys.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ª–æ–∫–∞–ª—å
    for (const locale of SUPPORTED_LOCALES) {
      if (locale === BASE_LOCALE) continue;
      
      const translations = loadTranslationFile(locale, filename);
      
      if (!translations) {
        console.error(`   ‚ùå ${locale}: —Ñ–∞–π–ª ${filename} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        hasErrors = true;
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
      const missingKeys = baseKeys.filter(key => !hasKey(translations, key));
      
      if (missingKeys.length > 0) {
        console.error(`   ‚ùå ${locale}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${missingKeys.length} –∫–ª—é—á–µ–π:`);
        missingKeys.forEach(key => console.error(`      - ${key}`));
        hasErrors = true;
      } else {
        console.log(`   ‚úÖ ${locale}: –≤—Å–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      }
    }
    
    console.log('');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã –≤ –¥—Ä—É–≥–∏—Ö –ª–æ–∫–∞–ª—è—Ö
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤...');
  for (const locale of SUPPORTED_LOCALES) {
    if (locale === BASE_LOCALE) continue;
    
    const localeDir = path.join(LOCALES_DIR, locale);
    if (!fs.existsSync(localeDir)) {
      console.error(`‚ùå –ü–∞–ø–∫–∞ –ª–æ–∫–∞–ª–∏ ${locale} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      hasErrors = true;
      continue;
    }
    
    const localeFiles = fs.readdirSync(localeDir)
      .filter(file => file.endsWith('.json'));
    
    const extraFiles = localeFiles.filter(file => !translationFiles.includes(file));
    if (extraFiles.length > 0) {
      console.warn(`‚ö†Ô∏è  ${locale}: –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã: ${extraFiles.join(', ')}`);
    }
  }
  
  console.log('\n' + '='.repeat(50));
  
  if (hasErrors) {
    console.error('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö!');
    console.error('üö´ –°–±–æ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.');
    process.exit(1);
  } else {
    console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø–æ—Ä—è–¥–∫–µ!');
    console.log('üöÄ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–±–æ—Ä–∫—É.');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkTranslations(); 