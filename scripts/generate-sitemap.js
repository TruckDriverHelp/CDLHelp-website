#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const { parseString } = require('xml2js');

console.log('üöÄ Generating optimized sitemap...\n');

try {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º sitemap
  execSync('npx next-sitemap', { stdio: 'inherit' });
  
  console.log('\n‚úÖ Sitemap generated successfully!\n');
  
  // SEO –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ sitemap
  console.log('üìä SEO Analysis:\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π sitemap
  const sitemapPath = path.join(process.cwd(), 'public', 'sitemap.xml');
  const sitemapIndexPath = path.join(process.cwd(), 'public', 'sitemap-index.xml');
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º sitemap index –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (fs.existsSync(sitemapIndexPath)) {
    const indexContent = fs.readFileSync(sitemapIndexPath, 'utf8');
    console.log('üóÇÔ∏è  Sitemap Index found - Multiple sitemaps generated for better SEO');
    
    // –ü–∞—Ä—Å–∏–º sitemap index
    parseString(indexContent, (err, result) => {
      if (!err && result.sitemapindex && result.sitemapindex.sitemap) {
        const sitemapCount = result.sitemapindex.sitemap.length;
        console.log(`   üìÅ Number of sitemap files: ${sitemapCount}`);
        
        result.sitemapindex.sitemap.forEach((sitemap, index) => {
          console.log(`   üìÑ Sitemap ${index + 1}: ${sitemap.loc[0]}`);
        });
      }
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π sitemap —Å URL
  const mainSitemapPath = path.join(process.cwd(), 'public', 'sitemap-0.xml');
  if (fs.existsSync(mainSitemapPath)) {
    const sitemapContent = fs.readFileSync(mainSitemapPath, 'utf8');
    const sitemapStats = fs.statSync(mainSitemapPath);
    const sitemapSizeKB = (sitemapStats.size / 1024).toFixed(2);
    
    console.log(`\nüìã Main Sitemap Analysis:`);
    console.log(`   üìè File size: ${sitemapSizeKB} KB`);
    
    // –ü–∞—Ä—Å–∏–º XML –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    parseString(sitemapContent, (err, result) => {
      if (err) {
        console.error('‚ùå Error parsing sitemap XML:', err.message);
        return;
      }
      
      if (result.urlset && result.urlset.url) {
        const urls = result.urlset.url;
        const totalUrls = urls.length;
        
        console.log(`   üîó Total URLs: ${totalUrls}`);
        
        // SEO –ü—Ä–æ–≤–µ—Ä–∫–∏
        console.log(`\nüîç SEO Quality Checks:`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if (sitemapSizeKB > 50000) { // 50MB –ª–∏–º–∏—Ç
          console.log('   ‚ö†Ô∏è  WARNING: Sitemap size exceeds 50MB limit');
        } else if (sitemapSizeKB > 10000) { // 10MB —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
          console.log('   ‚ö†Ô∏è  NOTICE: Sitemap size is large (>10MB), consider splitting');
        } else {
          console.log('   ‚úÖ File size is optimal');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ URL
        if (totalUrls > 50000) {
          console.log('   ‚ö†Ô∏è  WARNING: Sitemap contains more than 50,000 URLs');
        } else if (totalUrls > 10000) {
          console.log('   ‚ö†Ô∏è  NOTICE: Large number of URLs, consider using sitemap index');
        } else {
          console.log('   ‚úÖ URL count is optimal');
        }
        
        // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        const priorities = {};
        const changefreqs = {};
        let hreflangCount = 0;
        let lastmodCount = 0;
        
        urls.forEach(url => {
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
          if (url.priority && url.priority[0]) {
            const priority = parseFloat(url.priority[0]);
            priorities[priority] = (priorities[priority] || 0) + 1;
          }
          
          // –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
          if (url.changefreq && url.changefreq[0]) {
            const changefreq = url.changefreq[0];
            changefreqs[changefreq] = (changefreqs[changefreq] || 0) + 1;
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ hreflang (xhtml:link)
          if (url['xhtml:link']) {
            hreflangCount++;
          }
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ lastmod
          if (url.lastmod && url.lastmod[0]) {
            lastmodCount++;
          }
        });
        
        // –û—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        console.log(`\nüìä Priority Distribution:`);
        Object.entries(priorities)
          .sort(([a], [b]) => parseFloat(b) - parseFloat(a))
          .forEach(([priority, count]) => {
            const percentage = ((count / totalUrls) * 100).toFixed(1);
            console.log(`   Priority ${priority}: ${count} URLs (${percentage}%)`);
          });
        
        // –û—Ç—á–µ—Ç –ø–æ —á–∞—Å—Ç–æ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        console.log(`\n‚è∞ Change Frequency Distribution:`);
        Object.entries(changefreqs)
          .sort(([,a], [,b]) => b - a)
          .forEach(([freq, count]) => {
            const percentage = ((count / totalUrls) * 100).toFixed(1);
            console.log(`   ${freq}: ${count} URLs (${percentage}%)`);
          });
        
        // –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å
        console.log(`\nüåç Internationalization:`);
        if (hreflangCount > 0) {
          const hreflangPercentage = ((hreflangCount / totalUrls) * 100).toFixed(1);
          console.log(`   ‚úÖ Hreflang tags: ${hreflangCount} URLs (${hreflangPercentage}%)`);
        } else {
          console.log(`   ‚ö†Ô∏è  No hreflang tags found - consider adding for multilingual SEO`);
        }
        
        // LastMod
        console.log(`\nüìÖ Last Modified:`);
        if (lastmodCount === totalUrls) {
          console.log(`   ‚úÖ All URLs have lastmod dates`);
        } else {
          console.log(`   ‚ö†Ô∏è  ${totalUrls - lastmodCount} URLs missing lastmod dates`);
        }
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è URL
        console.log(`\nüìÇ URL Categories:`);
        const categories = {
          'Home pages': 0,
          'CDL Schools (States)': 0,
          'CDL Schools (Cities)': 0,
          'Pre-trip Inspection': 0,
          'Articles': 0,
          'Static pages': 0,
          'Other': 0
        };
        
        urls.forEach(url => {
          const loc = url.loc[0];
          const path = new URL(loc).pathname;
          
          if (path === '/' || path.match(/^\/[a-z]{2}\/?$/)) {
            categories['Home pages']++;
          } else if (path.includes('/cdl-schools/') && path.split('/').length === 4) {
            categories['CDL Schools (States)']++;
          } else if (path.includes('/cdl-schools/') && path.split('/').length === 5) {
            categories['CDL Schools (Cities)']++;
          } else if (path.includes('/pre-trip-inspection/') && !path.includes('/guide')) {
            categories['Pre-trip Inspection']++;
          } else if (path.match(/^(\/[a-z]{2})?\/[^\/]+$/) && !path.includes('/companies') && !path.includes('/contact')) {
            categories['Articles']++;
          } else if (path.includes('/companies') || path.includes('/contact') || path.includes('/privacy-policy')) {
            categories['Static pages']++;
          } else {
            categories['Other']++;
          }
        });
        
        Object.entries(categories).forEach(([category, count]) => {
          if (count > 0) {
            const percentage = ((count / totalUrls) * 100).toFixed(1);
            console.log(`   ${category}: ${count} URLs (${percentage}%)`);
          }
        });
        
        // SEO –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log(`\nüí° SEO Recommendations:`);
        
        if (sitemapSizeKB > 1000) {
          console.log(`   üìù Consider implementing sitemap index for better crawling`);
        }
        
        if (hreflangCount === 0) {
          console.log(`   üåê Add hreflang attributes for international SEO`);
        }
        
        const highPriorityCount = priorities['1'] || 0;
        const mediumPriorityCount = (priorities['0.8'] || 0) + (priorities['0.9'] || 0);
        
        if (highPriorityCount > totalUrls * 0.1) {
          console.log(`   ‚öñÔ∏è  Too many high priority pages (${highPriorityCount}), consider redistributing`);
        }
        
        if (mediumPriorityCount < totalUrls * 0.2) {
          console.log(`   üìà Consider increasing priority for important category pages`);
        }
        
        console.log(`   ‚úÖ Submit sitemap to Google Search Console and Bing Webmaster Tools`);
        console.log(`   ‚úÖ Monitor sitemap processing in search console`);
        console.log(`   ‚úÖ Update sitemap regularly when content changes`);
        
      } else {
        console.log('   ‚ùå No URLs found in sitemap');
      }
    });
  } else {
    console.log('‚ùå Sitemap file not found');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º robots.txt
  const robotsPath = path.join(process.cwd(), 'public', 'robots.txt');
  if (fs.existsSync(robotsPath)) {
    const robotsContent = fs.readFileSync(robotsPath, 'utf8');
    console.log(`\nü§ñ Robots.txt Analysis:`);
    
    if (robotsContent.includes('Sitemap:')) {
      console.log('   ‚úÖ Sitemap reference found in robots.txt');
    } else {
      console.log('   ‚ö†Ô∏è  No sitemap reference in robots.txt');
    }
    
    if (robotsContent.includes('Disallow: /api/')) {
      console.log('   ‚úÖ API routes properly disallowed');
    }
    
    if (robotsContent.includes('Disallow: /_next/')) {
      console.log('   ‚úÖ Next.js build files properly disallowed');
    }
  }
  
  console.log(`\nüéâ SEO-optimized sitemap generation completed!`);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º XML —Ñ–∞–π–ª—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö
  try {
    console.log('\nüîß Formatting XML files for better readability...');
    const { main: formatSitemaps } = require('./format-sitemap');
    formatSitemaps();
    console.log('‚úÖ XML formatting completed!');
  } catch (error) {
    console.warn('‚ö†Ô∏è Could not format XML files:', error.message);
  }
  
  console.log(`\nüìç Next steps:`);
  console.log(`   1. Submit sitemap to Google Search Console`);
  console.log(`   2. Submit sitemap to Bing Webmaster Tools`);
  console.log(`   3. Monitor indexing status`);
  console.log(`   4. Set up automated sitemap regeneration`);
  
} catch (error) {
  console.error('‚ùå Error generating sitemap:', error.message);
  process.exit(1);
} 