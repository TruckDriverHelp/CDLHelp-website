const fs = require('fs');
const path = require('path');

const LOCALES_DIR = path.join(process.cwd(), 'public/locales');
const SUPPORTED_LOCALES = ['en', 'ru', 'uk', 'ar', 'ko', 'zh', 'tr', 'pt'];
const BASE_LOCALE = 'en';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞
function getAllKeys(obj, prefix = '') {
  let keys = [];
  
  for (const key in obj) {
    const fullKey = prefix ? `${prefix}.${key}` : key;
    
    if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
      keys = keys.concat(getAllKeys(obj[key], fullKey));
    } else {
      keys.push(fullKey);
    }
  }
  
  return keys;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏ –∫–ª—é—á–∞
function setValueByPath(obj, keyPath, value) {
  const keys = keyPath.split('.');
  let current = obj;
  
  for (let i = 0; i < keys.length - 1; i++) {
    const key = keys[i];
    if (!(key in current) || typeof current[key] !== 'object') {
      current[key] = {};
    }
    current = current[key];
  }
  
  current[keys[keys.length - 1]] = value;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏ –∫–ª—é—á–∞
function getValueByPath(obj, keyPath) {
  const keys = keyPath.split('.');
  let current = obj;
  
  for (const key of keys) {
    if (current && typeof current === 'object' && key in current) {
      current = current[key];
    } else {
      return null;
    }
  }
  
  return current;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
function hasKey(obj, keyPath) {
  return getValueByPath(obj, keyPath) !== null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–∞
function loadTranslationFile(locale, filename) {
  const filePath = path.join(LOCALES_DIR, locale, filename);
  
  if (!fs.existsSync(filePath)) {
    return null;
  }
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(content);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${filePath}: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞
function saveTranslationFile(locale, filename, data) {
  const localeDir = path.join(LOCALES_DIR, locale);
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(localeDir)) {
    fs.mkdirSync(localeDir, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${localeDir}`);
  }
  
  const filePath = path.join(localeDir, filename);
  
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${filePath}: ${error.message}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function fixTranslations() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');
  
  const baseLocaleDir = path.join(LOCALES_DIR, BASE_LOCALE);
  
  if (!fs.existsSync(baseLocaleDir)) {
    console.error(`‚ùå –ë–∞–∑–æ–≤–∞—è –ª–æ–∫–∞–ª—å ${BASE_LOCALE} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
    process.exit(1);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ –±–∞–∑–æ–≤–æ–π –ª–æ–∫–∞–ª–∏
  const translationFiles = fs.readdirSync(baseLocaleDir)
    .filter(file => file.endsWith('.json'));
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${translationFiles.length}`);
  console.log(`üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ª–æ–∫–∞–ª–∏: ${SUPPORTED_LOCALES.join(', ')}\n`);
  
  let fixedFiles = 0;
  let fixedKeys = 0;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞
  for (const filename of translationFiles) {
    console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filename}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª
    const baseTranslations = loadTranslationFile(BASE_LOCALE, filename);
    if (!baseTranslations) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª ${filename}`);
      continue;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    const baseKeys = getAllKeys(baseTranslations);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ª–æ–∫–∞–ª—å
    for (const locale of SUPPORTED_LOCALES) {
      if (locale === BASE_LOCALE) continue;
      
      let translations = loadTranslationFile(locale, filename);
      let fileChanged = false;
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
      if (!translations) {
        translations = {};
        fileChanged = true;
        fixedFiles++;
        console.log(`   üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è ${locale}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
      const missingKeys = baseKeys.filter(key => !hasKey(translations, key));
      
      if (missingKeys.length > 0) {
        console.log(`   üîß ${locale}: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ${missingKeys.length} –∫–ª—é—á–µ–π`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
        for (const key of missingKeys) {
          const baseValue = getValueByPath(baseTranslations, key);
          let translatedValue;
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
          if (typeof baseValue === 'string') {
            translatedValue = `[${locale.toUpperCase()}] ${baseValue}`;
          } else {
            translatedValue = baseValue;
          }
          
          setValueByPath(translations, key, translatedValue);
          fileChanged = true;
          fixedKeys++;
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (fileChanged) {
        saveTranslationFile(locale, filename, translations);
      } else {
        console.log(`   ‚úÖ ${locale}: —Ñ–∞–π–ª —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω`);
      }
    }
    
    console.log('');
  }
  
  console.log('='.repeat(50));
  console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
  console.log(`üìÅ –°–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
  console.log(`üîë –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–π: ${fixedKeys}`);
  console.log(`\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã!`);
  console.log(`üîç –ó–∞–≥–ª—É—à–∫–∏ –∏–º–µ—é—Ç —Ñ–æ—Ä–º–∞—Ç: [LOCALE] Original text`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixTranslations(); 